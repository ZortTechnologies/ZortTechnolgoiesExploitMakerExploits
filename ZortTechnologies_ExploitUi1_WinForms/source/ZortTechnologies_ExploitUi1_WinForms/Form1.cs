using Microsoft.Win32;
using ScintillaNET;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ZortTechnologies_ExploitUi1_WinForms
{
    public partial class Form1 : Form
    {

        private static Random random = new Random();

        public static string RandomString(int length)
        {
            const string chars = "ABCDEFGHIJKLMNOPQABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789RSTUVWXYZ0123456789";
            return new string(Enumerable.Repeat(chars, length)
                .Select(s => s[random.Next(s.Length)]).ToArray());
        }

        public string dcad = "Example#000";

        public string omgname = RandomString(10);
        public string expad = "Exploit Name";
        ai piroai = new ai();
        public Form1()
        {
            try
            {
                this.Text = RandomString(10);
                InitializeComponent();
            }
           catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void minimize_Click(object sender, EventArgs e)
        {
            this.WindowState = FormWindowState.Minimized;
        }

        private void close_Click(object sender, EventArgs e)
        {
            if (ZortTechnologies_ExploitUi1_WinForms.Properties.Settings.Default.texteditor == 1)
            {
                string sdad = ScintillaBox.Text.Replace("--Scintilla Edited by " + dcad + " Welcome to " + expad + " :)--", " ");
                ZortTechnologies_ExploitUi1_WinForms.Properties.Settings.Default.lasttext = sdad;
                ZortTechnologies_ExploitUi1_WinForms.Properties.Settings.Default.Save();
            }
            else
            {
                HtmlDocument document = webBrowser1.Document;
                string scriptName = "GetText";
                object[] args = new string[0];
                object obj = document.InvokeScript(scriptName, args);
                string script = obj.ToString();
                string dadfds = script.Replace("--Monaco Edited by " + dcad + " Welcome to " + expad + " :)--", " ");
                ZortTechnologies_ExploitUi1_WinForms.Properties.Settings.Default.lasttext = dadfds;
                ZortTechnologies_ExploitUi1_WinForms.Properties.Settings.Default.Save();
            }
                //save editor
                Environment.Exit(0);
        }
        private string defPath = Directory.GetCurrentDirectory()+@"\bin\Monaco\";

        private void addIntel(string label, string kind, string detail, string insertText)
        {
            string text = "\"" + label + "\"";
            string text2 = "\"" + kind + "\"";
            string text3 = "\"" + detail + "\"";
            string text4 = "\"" + insertText + "\"";
            webBrowser1.Document.InvokeScript("AddIntellisense", new object[]
            {
                label,
                kind,
                detail,
                insertText
            });
        }

        private void addGlobalF()
        {
            string[] array = File.ReadAllLines(this.defPath + "//globalf.txt");
            foreach (string text in array)
            {
                bool flag = text.Contains(':');
                if (flag)
                {
                    this.addIntel(text, "Function", text, text.Substring(1));
                }
                else
                {
                    this.addIntel(text, "Function", text, text);
                }
            }
        }

        private void addGlobalV()
        {
            foreach (string text in File.ReadLines(this.defPath + "//globalv.txt"))
            {
                this.addIntel(text, "Variable", text, text);
            }
        }

        private void addGlobalNS()
        {
            foreach (string text in File.ReadLines(this.defPath + "//globalns.txt"))
            {
                this.addIntel(text, "Class", text, text);
            }
        }

        private void addMath()
        {
            foreach (string text in File.ReadLines(this.defPath + "//classfunc.txt"))
            {
                this.addIntel(text, "Method", text, text);
            }
        }

        private void addBase()
        {
            foreach (string text in File.ReadLines(this.defPath + "//base.txt"))
            {
                this.addIntel(text, "Keyword", text, text);
            }
        }
        private async void Form1_Load(object sender, EventArgs e)
        {
            this.Text = omgname;
            this.TopMost = ZortTechnologies_ExploitUi1_WinForms.Properties.Settings.Default.topmost;
            label1.Text = expad;
            piroai.check();
            
            if (ZortTechnologies_ExploitUi1_WinForms.Properties.Settings.Default.texteditor == 1)
            {
                //Scintilla Highlighting credits to : notvroom
                ScintillaBox.Visible = true;
                webBrowser1.Visible = false;
                Scintilla scintilla = this.ScintillaBox;
                foreach (Style style in scintilla.Styles)
                {
                    style.Font = "Monaco";
                    style.ForeColor = Color.FromArgb(0xFFFFFF);
                    style.Size = 11;

                    scintilla.Styles[32].BackColor = Color.FromArgb(40, 40, 40);
                    scintilla.StyleClearAll();
                    scintilla.Styles[33].BackColor = Color.FromArgb(40, 40, 40);
                    scintilla.Styles[Style.Cpp.Identifier].ForeColor = Color.FromArgb(0xFFFFFF);
                    scintilla.Styles[Style.Cpp.Comment].ForeColor = Color.FromArgb(0x558817);
                    scintilla.Styles[Style.Cpp.CommentLine].ForeColor = Color.FromArgb(0x558817);
                    scintilla.Styles[Style.Cpp.CommentDoc].ForeColor = Color.FromArgb(0x2FAE35);
                    scintilla.Styles[Style.Cpp.Number].ForeColor = Color.FromArgb(0xE94744);
                    scintilla.Styles[Style.Cpp.String].ForeColor = Color.FromArgb(0xE94744);
                    scintilla.Styles[Style.Cpp.Character].ForeColor = Color.FromArgb(0xE95454);
                    scintilla.Styles[Style.Cpp.Preprocessor].ForeColor = Color.FromArgb(0x8AAFEE);
                    scintilla.Styles[Style.Cpp.Operator].ForeColor = Color.FromArgb(0xE0E0E0);
                    scintilla.Styles[Style.Cpp.Regex].ForeColor = Color.FromArgb(0xff00ff);
                    scintilla.Styles[Style.Cpp.CommentLineDoc].ForeColor = Color.FromArgb(0x77A7DB);
                    scintilla.Styles[Style.Cpp.Word].ForeColor = Color.FromArgb(0x01A9E9);
                    scintilla.Styles[Style.Cpp.Word2].ForeColor = Color.FromArgb(0x01A9E9);
                    scintilla.Styles[Style.Cpp.CommentDocKeyword].ForeColor = Color.FromArgb(0xB3D991);
                    scintilla.Styles[Style.Cpp.CommentDocKeywordError].ForeColor = Color.FromArgb(0xFF0000);
                    scintilla.Styles[Style.Cpp.GlobalClass].ForeColor = Color.FromArgb(0x48A8EE);
                    scintilla.Lexer = Lexer.Cpp;

                    scintilla.Styles[14].Bold = true;
                    scintilla.SetKeywords(0, "and break do else elseif end for function if in local nil not or repeat return then until while false truefor local end nil next _G debug do repeat until string math function");
                    scintilla.SetKeywords(1, "string.byte string.char string.dump string.find string.format string.gsub string.len string.lower string.rep string.sub string.upper table.concat table.insert table.remove table.sort math.abs math.acos math.asin math.atan math.atan2 math.ceil math.cos math.deg math.exp math.floor math.frexp math.ldexp math.log math.max math.min math.pi math.pow math.rad math.random math.randomseed math.sin math.sqrt math.tan string.gfind string.gmatch string.match string.reverse string.pack string.packsize string.unpack table.foreach table.foreachi table.getn table.setn table.maxn table.pack table.unpack table.move math.cosh math.fmod math.huge math.log10 math.modf math.mod math.sinh math.tanh math.maxinteger math.mininteger math.tointeger math.type math.ult bit32.arshift bit32.band bit32.bnot bit32.bor bit32.btest bit32.bxor bit32.extract bit32.replace bit32.lrotate bit32.lshift bit32.rrotate bit32.rshift utf8.char utf8.charpattern utf8.codes utf8.codepoint utf8.len utf8.offsetassert collectgarbage dofile error _G getmetatable ipairs loadfile next pairs pcall print rawequal rawget rawset setmetatable tonumber tostring type _VERSION xpcall string table math coroutine io os debug getfenv gcinfo load loadlib loadstring require select setfenv unpack _LOADED LUA_PATH _REQUIREDNAME package rawlen package bit32 utf8 _ENV loadstring setmetatable wait tostring tonumber pairs getsenv getlocals getfenv setfenv print getrawmetatable getmetatable setreadonly getreg getlocal require");
                    scintilla.SetKeywords(2, "game syn writefile decompile Drawing");
                }
                ScintillaBox.Text = "--Scintilla Edited by " + dcad + " Welcome to " + expad + " :)--" + "\n\n" + ZortTechnologies_ExploitUi1_WinForms.Properties.Settings.Default.lasttext;
            }
            else
            {
                //Monaco credits to : i forgot
                ScintillaBox.Visible = false;
                webBrowser1.Visible = true;
                try
                {
                    RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Internet Explorer\\Main\\FeatureControl\\FEATURE_BROWSER_EMULATION", true);
                    string friendlyName = AppDomain.CurrentDomain.FriendlyName;
                    bool flag2 = registryKey.GetValue(friendlyName) == null;
                    if (flag2)
                    {
                        registryKey.SetValue(friendlyName, 11001, RegistryValueKind.DWord);
                    }
                    registryKey = null;
                    friendlyName = null;
                }
                catch (Exception)
                {
                }
                webBrowser1.Url = new Uri(string.Format("file:///{0}/bin/Monaco/Monaco.html", Directory.GetCurrentDirectory()));
                await Task.Delay(500);
                webBrowser1.Document.InvokeScript("SetTheme", new string[]
                {
                   "Dark"

                });
                addBase();
                addMath();
                addGlobalNS();
                addGlobalV();
                addGlobalF();
                webBrowser1.Document.InvokeScript("SetText", new object[]
                {
                 "--Monaco Edited by "+dcad+" Welcome to "+expad+" :)--"+"\n\n"+ZortTechnologies_ExploitUi1_WinForms.Properties.Settings.Default.lasttext
                });
            }
            timer1.Enabled = true;
            timer1.Start();
            timer2.Enabled = true;
            timer2.Start();
        }

        private void Settings_Click(object sender, EventArgs e)
        {
            settings sts = new settings();
            this.Hide();
            sts.Show();
        }
        api piroapi = new api();
        private void bunifuFlatButton1_Click(object sender, EventArgs e)
        {
            
           if (ZortTechnologies_ExploitUi1_WinForms.Properties.Settings.Default.texteditor == 1)
           {
               piroapi.execute(ScintillaBox.Text);
           }
           else
           {
               HtmlDocument document = webBrowser1.Document;
               string scriptName = "GetText";
               object[] args = new string[0];
               object obj = document.InvokeScript(scriptName, args);
               string script = obj.ToString();
               piroapi.execute(script);

           }
             
        }

        private void bunifuFlatButton2_Click(object sender, EventArgs e)
       {
         
            if (ZortTechnologies_ExploitUi1_WinForms.Properties.Settings.Default.texteditor == 1)
           {
               ScintillaBox.Text = "";
           }
           else
           {
               webBrowser1.Document.InvokeScript("SetText", new object[]
               {
                ""
               });

           }
           
        }

        private void bunifuFlatButton4_Click(object sender, EventArgs e)
       {
          
            System.Windows.Forms.SaveFileDialog saveFileDialog = new System.Windows.Forms.SaveFileDialog();
           saveFileDialog.Filter = "Lua file (*.lua)|*.lua|Text File (*.txt)|*.txt";
           saveFileDialog.Title = "Synape x theme Tuaxa ai";
           if (saveFileDialog.ShowDialog() != DialogResult.OK)
           {

           }
           try
           {
               if (ZortTechnologies_ExploitUi1_WinForms.Properties.Settings.Default.texteditor == 1)
               {

                   StreamWriter streamWriter = new StreamWriter(File.Create(saveFileDialog.FileName));
                   streamWriter.Write(ScintillaBox.Text);
                   streamWriter.Dispose();
               }
               else
               {
                   HtmlDocument document = webBrowser1.Document;
                   string scriptName = "GetText";
                   object[] args = new string[0];
                   object obj = document.InvokeScript(scriptName, args);
                   string script = obj.ToString();
                   StreamWriter streamWriter = new StreamWriter(File.Create(saveFileDialog.FileName));
                   streamWriter.Write(script);
                   streamWriter.Dispose();

               }



           }
           catch
           {

           }
            
        }

        private void bunifuFlatButton3_Click(object sender, EventArgs e)
       {
           
            System.Windows.Forms.OpenFileDialog openfiledialog = new System.Windows.Forms.OpenFileDialog();
           openfiledialog.Filter = "Lua file (*.lua)|*.lua|Text File (*.txt)|*.txt";
           openfiledialog.FilterIndex = 2;
           openfiledialog.Title = "Synape x theme Tuaxa ai";
           openfiledialog.RestoreDirectory = true;
           if (openfiledialog.ShowDialog() != DialogResult.OK)
           {
               return;
           }
           try
           {
               webBrowser1.Document.InvokeScript("SetText", new object[]
           {
               ""
           });
               Stream stream;
               if ((stream = openfiledialog.OpenFile()) != null)
               {
                   using (stream)
                   {
                       if (ZortTechnologies_ExploitUi1_WinForms.Properties.Settings.Default.texteditor == 1)
                       {
                           ScintillaBox.Text = File.ReadAllText(openfiledialog.FileName)
;
                       }
                       else
                       {
                           webBrowser1.Document.InvokeScript("SetText", new object[]
                   {
                         File.ReadAllText(openfiledialog.FileName)
                   });

                       }

                   }
               }
           }
           catch
           {

           }
             
        }

        private void bunifuFlatButton5_Click(object sender, EventArgs e)
       {
           
          piroapi.injectapi();
            
        }
        //credits : Luxif Editted By : Tuaxa#9999
        public static void LoadListBox(ListBox lsb, string Folder, string FileType)
      {
         
            DirectoryInfo dinfo = new DirectoryInfo(Folder);
           FileInfo[] Files = dinfo.GetFiles(FileType);
           foreach (FileInfo file in Files)
           {
               lsb.Items.Add(file.Name);
           }
             
        }

        private void timer1_Tick(object sender, EventArgs e)
        {

            lastbox.Items.Clear();
            LoadListBox(lastbox, "./Scripts", "*.txt");
            LoadListBox(lastbox, "./Scripts", "*.lua");

        }

        private void listBox1_SelectedIndexChanged_1(object sender, EventArgs e)
       {
            //MessageBox.Show(e.ToString());
          
            if (ZortTechnologies_ExploitUi1_WinForms.Properties.Settings.Default.texteditor == 1)
            {
                ScintillaBox.Text = File.ReadAllText(Directory.GetCurrentDirectory() + @"\scripts\" + lastbox.SelectedItem.ToString());
            }
            else
            {
                webBrowser1.Document.InvokeScript("SetText", new object[]
               {
                File.ReadAllText(Directory.GetCurrentDirectory()+@"\scripts\"+lastbox.SelectedItem.ToString())
          });

            }
             

        }
        public const int WM_NCLBUTTONDOWN = 0xA1;
        public const int HT_CAPTION = 0x2;

        [System.Runtime.InteropServices.DllImport("user32.dll")]
        public static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);
        [System.Runtime.InteropServices.DllImport("user32.dll")]
        public static extern bool ReleaseCapture();
        private void panel1_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                ReleaseCapture();
                SendMessage(Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
            }
        }
        //credits : stackowerflowmharti
       
        /*/
         if (e.Button == MouseButtons.Left)
            {
                ReleaseCapture();
                SendMessage(Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
            }
        /*/
        private void Form1_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                ReleaseCapture();
                SendMessage(Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
            }
        }

        private void timer2_Tick(object sender, EventArgs e)
        {
            if (ZortTechnologies_ExploitUi1_WinForms.Properties.Settings.Default.performancemode == true)
            {


                piroai.optimize();
            }
        }
    }
}
